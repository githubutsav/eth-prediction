# -*- coding: utf-8 -*-
"""Eth_price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u916FLds_EJgR4UzeVV5nHPZhUm1DF0i
"""

!pip install yfinance matplotlib pandas scikit-learn numpy tensorflow

import yfinance as yf
import matplotlib.pyplot as plt
import pandas as pd

eth_data = yf.download('ETH-USD', start='2023-01-01', end='2024-12-01')

print(eth_data.head())

prices = eth_data[['Close']]
prices.reset_index(inplace=True)

print(prices.head())

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler(feature_range=(0, 1))

prices['Close'] = scaler.fit_transform(prices[['Close']])

print("Scaled Data:")
print(prices.head())

import numpy as np

window_size = 60

def prepare_data(data, window_size):
    X, y = [], []
    for i in range(len(data) - window_size):
        X.append(data[i:i + window_size])
        y.append(data[i + window_size])
    return np.array(X), np.array(y)

data = prices['Close'].values
X, y = prepare_data(data, window_size)

X = X.reshape(X.shape[0], X.shape[1], 1)

print(f"Shape of X: {X.shape}")
print(f"Shape of y: {y.shape}")

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM

model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X.shape[1], 1)),
    LSTM(50, return_sequences=False),
    Dense(25),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

model.summary()

history = model.fit(X, y, batch_size=32, epochs=10, validation_split=0.1)

print("Model trained successfully!")

import matplotlib.pyplot as plt

plt.figure(figsize=(8, 6))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss During Training')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()

train_predictions = model.predict(X)

train_predictions = scaler.inverse_transform(train_predictions.reshape(-1, 1))
y_actual = scaler.inverse_transform(y.reshape(-1, 1))

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_actual, train_predictions)
print(f"Mean Squared Error on Training Data: {mse}")

recent_data = data[-window_size:].reshape(1, window_size, 1)

predicted_price = model.predict(recent_data)

predicted_price = scaler.inverse_transform(predicted_price)
print(f"Predicted Ethereum Price for the next day: {predicted_price[0][0]}")

plt.figure(figsize=(12, 6))
plt.plot(y_actual, label='Actual Prices', color='blue')
plt.plot(train_predictions, label='Predicted Prices', color='red')
plt.title('Ethereum Price Prediction on Training Data')
plt.xlabel('Days')
plt.ylabel('Price')
plt.grid(True)
plt.legend()
plt.show()

from datetime import timedelta

# Plot actual prices
plt.figure(figsize=(12, 6))
plt.plot(prices.index,prices['Close'],label='Actual Prices', color='blue', linewidth=2)

# Plot predicted prices
plt.plot(future_dates, predicted_prices,label='Predicted Prices (Next 30 Days)', color='red', linestyle='--', linewidth=2)

# Customize the plot
plt.title('Ethereum Price Prediction for the Next 30 Days', fontsize=14)
plt.xlabel('Date', fontsize=12)
plt.ylabel('Price (USD)', fontsize=12)

start_date = pd.Timestamp('2025-12-09')
end_date = pd.Timestamp('2026-01-30')
plt.xlim(start_date, end_date)


# Format the x-axis
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))
plt.gca().xaxis.set_major_locator(mdates.WeekdayLocator(interval=2))
plt.xticks(rotation=45)

# Add legend and grid
plt.legend()
plt.grid(True)

# Show the plot
plt.tight_layout()
plt.show()

